# -*- coding: utf-8 -*-
"""Gaussian Mixture

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_KCCnBmEFY4GGwLaV-pvpnsSdZPcCKK-
"""

import pandas as pd
import numpy as np
from sklearn.mixture import GaussianMixture

data = pd.read_csv("/content/IRIS (2).csv")

features = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
X = data[features]

n_components_range = range(1, 10)  # Test different numbers of clusters
lowest_bic = np.inf
optimal_n_components = 0

for n_components in n_components_range:
    gmm = GaussianMixture(n_components=n_components, covariance_type='full', random_state=0)
    gmm.fit(X)
    bic = gmm.bic(X)
    if bic < lowest_bic:
        lowest_bic = bic
        optimal_n_components = n_components

print(f"Optimal number of clusters (based on BIC): {optimal_n_components}")

gmm = GaussianMixture(n_components=optimal_n_components, covariance_type='full', random_state=0)
gmm.fit(X)

labels = gmm.predict(X)

data['cluster_gmm'] = labels

print(data.head())

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
for cluster in range(optimal_n_components):
    cluster_data = data[data['cluster_gmm'] == cluster]
    plt.scatter(cluster_data['sepal_length'], cluster_data['sepal_width'], label=f'Cluster {cluster}')

plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.title('EM Clustering (Gaussian Mixture Model)')
plt.legend()
plt.show()